/* Generated By:JavaCC: Do not edit this line. PseuParserConstants.java */
package pseu.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PseuParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT = 5;
  /** RegularExpression Id. */
  int AND = 6;
  /** RegularExpression Id. */
  int BEGIN = 7;
  /** RegularExpression Id. */
  int BINARY = 8;
  /** RegularExpression Id. */
  int DIV = 9;
  /** RegularExpression Id. */
  int DO = 10;
  /** RegularExpression Id. */
  int ELSE = 11;
  /** RegularExpression Id. */
  int END = 12;
  /** RegularExpression Id. */
  int FALSE = 13;
  /** RegularExpression Id. */
  int FOR = 14;
  /** RegularExpression Id. */
  int FUN = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int IMPLIES = 17;
  /** RegularExpression Id. */
  int INTERSECTION = 18;
  /** RegularExpression Id. */
  int MOD = 19;
  /** RegularExpression Id. */
  int NOT = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int PROC = 22;
  /** RegularExpression Id. */
  int RETURN = 23;
  /** RegularExpression Id. */
  int THEN = 24;
  /** RegularExpression Id. */
  int TRUE = 25;
  /** RegularExpression Id. */
  int UNARY = 26;
  /** RegularExpression Id. */
  int UNION = 27;
  /** RegularExpression Id. */
  int VAL = 28;
  /** RegularExpression Id. */
  int VAR = 29;
  /** RegularExpression Id. */
  int WHILE = 30;
  /** RegularExpression Id. */
  int STAR = 31;
  /** RegularExpression Id. */
  int COMMA = 32;
  /** RegularExpression Id. */
  int SEMICOLON = 33;
  /** RegularExpression Id. */
  int COLON = 34;
  /** RegularExpression Id. */
  int DOT = 35;
  /** RegularExpression Id. */
  int LPAR = 36;
  /** RegularExpression Id. */
  int RPAR = 37;
  /** RegularExpression Id. */
  int LBRACK = 38;
  /** RegularExpression Id. */
  int RBRACK = 39;
  /** RegularExpression Id. */
  int LBRACE = 40;
  /** RegularExpression Id. */
  int RBRACE = 41;
  /** RegularExpression Id. */
  int RIGHT_ARROW = 42;
  /** RegularExpression Id. */
  int LEFT_ARROW = 43;
  /** RegularExpression Id. */
  int INT_LITERAL = 44;
  /** RegularExpression Id. */
  int STRING_LITERAL = 45;
  /** RegularExpression Id. */
  int LATEX_OP = 46;
  /** RegularExpression Id. */
  int OTHER_OP = 47;
  /** RegularExpression Id. */
  int ID = 48;
  /** RegularExpression Id. */
  int DIGIT = 49;
  /** RegularExpression Id. */
  int LETTER = 50;
  /** RegularExpression Id. */
  int ESCAPESEQ = 51;
  /** RegularExpression Id. */
  int UNEXPECTED_CHARACTER = 53;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<COMMENT>",
    "\"and\"",
    "\"begin\"",
    "\"binary\"",
    "\"div\"",
    "\"do\"",
    "\"else\"",
    "\"end\"",
    "\"false\"",
    "\"for\"",
    "\"fun\"",
    "\"if\"",
    "\"implies\"",
    "\"intersection\"",
    "\"mod\"",
    "\"not\"",
    "\"or\"",
    "\"proc\"",
    "\"return\"",
    "\"then\"",
    "\"true\"",
    "\"unary\"",
    "\"union\"",
    "\"val\"",
    "\"var\"",
    "\"while\"",
    "\"*\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"->\"",
    "\"<-\"",
    "<INT_LITERAL>",
    "<STRING_LITERAL>",
    "<LATEX_OP>",
    "<OTHER_OP>",
    "<ID>",
    "<DIGIT>",
    "<LETTER>",
    "<ESCAPESEQ>",
    "\":=\"",
    "<UNEXPECTED_CHARACTER>",
  };

}
