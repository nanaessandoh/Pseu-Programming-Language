/* Generated By:JavaCC: Do not edit this line. PseuParser.java */
package pseu.parser;

import pseu.common.SourceCoords ;
import pseu.common.Assert ;


public class PseuParser implements PseuParserConstants {
        private ASTBuilderI builder ;
        private String fileName = "unknown.pseu" ;

        public void setBuilder( ASTBuilderI builder ) {
                this.builder = builder ;
        }

        public void setFileName( String fileName ) {
                this.fileName = fileName ;
        }

        private SourceCoords currentCoords() {
                return makeCoords( getToken(1) ) ;
        }

        private SourceCoords prevCoords() {
                return makeCoords( getToken(0) ) ;
        }

        private SourceCoords makeCoords( Token tok ) {
                return new SourceCoords(
                        fileName,
                        tok.beginLine,
                        tok.beginColumn,
                        fileName,
                        tok.endLine,
                        tok.endColumn) ;
        }

        private boolean stayInTheLoop( int p ) {
                String op = getToken(1).image ;
                return precedence( op ) >= p ; }

        private class Pair {
                String name ;
                int precedence ;
                Pair( String str, int prec ) {
                name = str ; precedence = prec ; }
        }

        private Pair[] precedenceTable = {
                new Pair( "implies", 100 ),
                new Pair( "==>", 100 ),
                new Pair( "or",      200 ),
                new Pair( "and",     300 ),
                new Pair( "=",       400 ),
                new Pair( "!=",       400 ),
                new Pair( "/=",       400 ),
                new Pair( ">_",      400 ),
                new Pair( "_<",      400 ),
                new Pair( "<=",      400 ),
                new Pair( ">=",      400 ),
                new Pair( ">",       400 ),
                new Pair( "<",       400 ),
                new Pair( "\u005c\u005cle",    400 ),
                new Pair( "\u005c\u005cge",    400 ),
                new Pair( "union",   500 ),
                new Pair( "\u005c\u005ccup",   500 ),
                new Pair( "+",       500 ),
                new Pair( "-",       500 ),
                new Pair( "*",       600 ),
                new Pair( "/",       600 ),
                new Pair( "div",     600 ),
                new Pair( "mod",     600 ),
                new Pair( "intersection", 600 ),
                new Pair( "\u005c\u005ccap",   600 ),
                new Pair( "^",       700 ) } ;

        private int precedence( String name ) {
                for( Pair p : precedenceTable ) {
                        if( name.equals( p.name )  ) return p.precedence ; }
                return 1000000 ;
        }

  final public void File() throws ParseException {
    Block(false);
    jj_consume_token(0);
  }

/* endWithUnit says that an extra "();" should be inserted at
* the end of the block.
*/
  final public void Block(boolean endWithUnit) throws ParseException {
        int count ;
        SourceCoords start = currentCoords() ;
        SourceCoords end ;
         builder.startBlock() ;
    count = MoreBlock(0);
     end = prevCoords() ;
     if( endWithUnit ) {
        builder.mkTuple( 0, end) ;
        builder.mkExpressionCommand() ;
        ++count ; }
         builder.endBlock( count, start.combine(end) ) ;
  }

  final public int MoreBlock(int count) throws ParseException {
    if (jj_2_1(2147483647)) {
      UndeliminatedDeclaration();
                                count++;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        count = MoreBlock(count);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
     {if (true) return count;}
    } else if (jj_2_2(2147483647)) {
      DeliminatedDeclaration();
                              count++;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      count = MoreBlock(count);
     {if (true) return count;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case DIV:
      case FALSE:
      case FUN:
      case IMPLIES:
      case INTERSECTION:
      case MOD:
      case NOT:
      case OR:
      case PROC:
      case RETURN:
      case TRUE:
      case UNION:
      case STAR:
      case LPAR:
      case LBRACK:
      case LBRACE:
      case INT_LITERAL:
      case STRING_LITERAL:
      case LATEX_OP:
      case OTHER_OP:
      case ID:
        UndelimitedCommand();
                              count++;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          count = MoreBlock(count);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
         {if (true) return count;}
        break;
      case BEGIN:
      case FOR:
      case IF:
      case WHILE:
        DelimitedCommand();
                            count++;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        count = MoreBlock(count);
         {if (true) return count;}
        break;
      default:
        jj_la1[4] = jj_gen;
     {if (true) return count;}
      }
    }
    throw new Error("Missing return statement in function");
  }

  /////////////////////////
 //  Declarations       //
/////////////////////////
  final public void UndeliminatedDeclaration() throws ParseException {
    SourceCoords start = currentCoords() ;
    boolean isInitialized  = false ;
    boolean isTyped = false ;
    int count ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      Variable();
      jj_consume_token(COLON);
      Type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        Exp();
                      isInitialized = true ;
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
         builder.varDeclaration( isInitialized, start.combine(prevCoords()) );
      break;
    case VAL:
      jj_consume_token(VAL);
      Variable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        Type();
                            isTyped = true ;
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(52);
      Exp();
         builder.valDeclaration( isTyped, start.combine(prevCoords()) );
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DeliminatedDeclaration() throws ParseException {
    SourceCoords start = currentCoords() ;
    boolean isInitialized  = false ;
    boolean isTyped = false ;
    int count ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      jj_consume_token(FUN);
      Variable();
      jj_consume_token(LPAR);
      count = Params();
      jj_consume_token(RPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        Type();
                     isTyped=true;
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(DO);
      Block(false);
      jj_consume_token(END);
      jj_consume_token(FUN);
         builder.mkFunctionExp( count, isTyped, start.combine(prevCoords())) ;
         builder.valDeclaration( false, start.combine(prevCoords()) );
      break;
    case PROC:
      jj_consume_token(PROC);
      Variable();
      jj_consume_token(LPAR);
      count = Params();
      jj_consume_token(RPAR);
         builder.mkIdentifierType( "Unit", start ) ;
      jj_consume_token(DO);
      Block(true);
      jj_consume_token(END);
      jj_consume_token(PROC);
         builder.mkFunctionExp( count, true, start.combine(prevCoords())) ;
         builder.valDeclaration( false, start.combine(prevCoords()) );
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /////////////////////
 //  Commands       //
/////////////////////
  final public void DelimitedCommand() throws ParseException {
    SourceCoords start = currentCoords() ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      IfCommand(start);
      break;
    case WHILE:
      WhileCommand(start);
      break;
    case FOR:
      ForCommand(start);
      break;
    case BEGIN:
      BeginCommand();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UndelimitedCommand() throws ParseException {
    SourceCoords start = currentCoords() ;
    if (jj_2_3(2147483647)) {
      AssignmentCommand(start);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case DIV:
      case FALSE:
      case FUN:
      case IMPLIES:
      case INTERSECTION:
      case MOD:
      case NOT:
      case OR:
      case PROC:
      case TRUE:
      case UNION:
      case STAR:
      case LPAR:
      case LBRACK:
      case LBRACE:
      case INT_LITERAL:
      case STRING_LITERAL:
      case LATEX_OP:
      case OTHER_OP:
      case ID:
        ExpCommand(start);
        break;
      case RETURN:
        ReturnCommand(start);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AssignmentCommand(SourceCoords start) throws ParseException {
        SourceCoords end ;
        int count ;
    count = LHSs(start);
    jj_consume_token(52);
    Exps();
         end = prevCoords() ;
         builder.mkAssignment( count, start.combine(end) ) ;
  }

  final public int LHSs(SourceCoords start) throws ParseException {
    int count = 1 ;
    Variable();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      Variable();
                                    ++count;
    }
         {if (true) return count ;}
    throw new Error("Missing return statement in function");
  }

  final public void IfCommand(SourceCoords start) throws ParseException {
    jj_consume_token(IF);
    Exp();
    jj_consume_token(THEN);
    Block(false);
    jj_consume_token(ELSE);
    Block(false);
    jj_consume_token(END);
    jj_consume_token(IF);
         builder.mkIf( start.combine(prevCoords()) ) ;
  }

  final public void WhileCommand(SourceCoords start) throws ParseException {
    jj_consume_token(WHILE);
    Exp();
    jj_consume_token(DO);
    Block(false);
    jj_consume_token(END);
    jj_consume_token(WHILE);
         builder.mkWhile( start.combine(prevCoords()) ) ;
  }

  final public void ForCommand(SourceCoords start) throws ParseException {
    jj_consume_token(FOR);
    Variable();
    jj_consume_token(LEFT_ARROW);
    Exp();
    jj_consume_token(DO);
    Block(false);
    jj_consume_token(END);
    jj_consume_token(FOR);
         builder.mkFor( start.combine(prevCoords()) ) ;
  }

  final public void ReturnCommand(SourceCoords start) throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case DIV:
    case FALSE:
    case FUN:
    case IMPLIES:
    case INTERSECTION:
    case MOD:
    case NOT:
    case OR:
    case PROC:
    case TRUE:
    case UNION:
    case STAR:
    case LPAR:
    case LBRACK:
    case LBRACE:
    case INT_LITERAL:
    case STRING_LITERAL:
    case LATEX_OP:
    case OTHER_OP:
    case ID:
      Exp();
      break;
    default:
      jj_la1[13] = jj_gen;
        builder.mkTuple( 0, start ) ;
    }
         builder.mkReturn( start.combine(prevCoords()) ) ;
  }

  final public void BeginCommand() throws ParseException {
    jj_consume_token(BEGIN);
    Block(false);
    jj_consume_token(END);
  }

  final public void ExpCommand(SourceCoords start) throws ParseException {
    Exp();
         builder.mkExpressionCommand( ) ;
  }

  /////////////////////
 //  Expressions    //
/////////////////////
  final public void Exp() throws ParseException {
    Expression(0);
  }

  final public void Expression(int precedence) throws ParseException {
        SourceCoords opCoords ;
        String str ;
    Primary();
    label_2:
    while (true) {
      if (jj_2_4(2147483647) && (stayInTheLoop( precedence ))) {
        ;
      } else {
        break label_2;
      }
      str = Op();
                  opCoords = prevCoords() ;
                 builder.mkLookup( "binary(" +str+ ")", opCoords) ;
      Expression(1+precedence( str ));
                 builder.mkApplication(opCoords) ;
    }
  }

  final public void Primary() throws ParseException {
        SourceCoords start = currentCoords() ;
        String str ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case DIV:
    case IMPLIES:
    case INTERSECTION:
    case MOD:
    case NOT:
    case OR:
    case UNION:
    case STAR:
    case LATEX_OP:
    case OTHER_OP:
      str = Op();
      Primary();
         builder.mkLookup( "unary(" +str+ ")", start) ;
         builder.mkTuple( 0, start) ;
         builder.mkApplication( start) ;
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_5(2147483647)) {
        AbbreviatedFunctionExp();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case FUN:
        case PROC:
        case TRUE:
        case LPAR:
        case LBRACK:
        case LBRACE:
        case INT_LITERAL:
        case STRING_LITERAL:
        case ID:
          SimpleExp();
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FALSE:
            case FUN:
            case PROC:
            case TRUE:
            case DOT:
            case LPAR:
            case LBRACK:
            case LBRACE:
            case INT_LITERAL:
            case STRING_LITERAL:
            case ID:
              ;
              break;
            default:
              jj_la1[14] = jj_gen;
              break label_3;
            }
            PostfixOp(start);
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PostfixOp(SourceCoords start) throws ParseException {
        String name ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      name = Name();
         builder.mkLookup( name, start.combine(prevCoords())) ;
      break;
    case FALSE:
    case FUN:
    case PROC:
    case TRUE:
    case LPAR:
    case LBRACK:
    case LBRACE:
    case INT_LITERAL:
    case STRING_LITERAL:
    case ID:
      Arg();
         builder.mkApplication( start.combine(prevCoords())) ;
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SimpleExp() throws ParseException {
    SourceCoords start = currentCoords() ;
    Token tok ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
         builder.mkTrue( start ) ;
      break;
    case FALSE:
      jj_consume_token(FALSE);
         builder.mkFalse( start ) ;
      break;
    case STRING_LITERAL:
      tok = jj_consume_token(STRING_LITERAL);
          builder.mkStringConstant(
                        ParserHelper.unescapeString( tok.image ),
                start ) ;
      break;
    case INT_LITERAL:
      tok = jj_consume_token(INT_LITERAL);
          builder.mkIntConstant(
                        ParserHelper.cleanUpInt( tok.image ),
                start ) ;
      break;
    case ID:
      Variable();
         builder.mkFetch() ;
      break;
    case LBRACE:
      FiniteSetExp();
      break;
    case LBRACK:
      FiniteSequenceExp();
      break;
    case FUN:
    case PROC:
      FunctionExp();
      break;
    case LPAR:
      ParenthizedExp();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FiniteSetExp() throws ParseException {
    SourceCoords start = currentCoords() ;
        int count = 0 ;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case DIV:
    case FALSE:
    case FUN:
    case IMPLIES:
    case INTERSECTION:
    case MOD:
    case NOT:
    case OR:
    case PROC:
    case TRUE:
    case UNION:
    case STAR:
    case LPAR:
    case LBRACK:
    case LBRACE:
    case INT_LITERAL:
    case STRING_LITERAL:
    case LATEX_OP:
    case OTHER_OP:
    case ID:
      Exp();
                               ++count ;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        Exp();
                                   ++count ;
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
         builder.mkSet(count,  start.combine(prevCoords())) ;
  }

  final public void FiniteSequenceExp() throws ParseException {
    SourceCoords start = currentCoords() ;
        int count = 0 ;
    jj_consume_token(LBRACK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case DIV:
    case FALSE:
    case FUN:
    case IMPLIES:
    case INTERSECTION:
    case MOD:
    case NOT:
    case OR:
    case PROC:
    case TRUE:
    case UNION:
    case STAR:
    case LPAR:
    case LBRACK:
    case LBRACE:
    case INT_LITERAL:
    case STRING_LITERAL:
    case LATEX_OP:
    case OTHER_OP:
    case ID:
      Exp();
                               ++count ;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        Exp();
                                   ++count ;
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(RBRACK);
         builder.mkSequence(count,  start.combine(prevCoords())) ;
  }

  final public void FunctionExp() throws ParseException {
    SourceCoords start = currentCoords() ;
    boolean isTyped = false ;
        int count ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      jj_consume_token(FUN);
      jj_consume_token(LPAR);
      count = Params();
      jj_consume_token(RPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        Type();
                     isTyped=true;
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(DO);
      Block(false);
      jj_consume_token(END);
      jj_consume_token(FUN);
         builder.mkFunctionExp( count, isTyped, start.combine(prevCoords())) ;
      break;
    case PROC:
      jj_consume_token(PROC);
      jj_consume_token(LPAR);
      count = Params();
      jj_consume_token(RPAR);
         builder.mkIdentifierType( "Unit", start ) ;
      jj_consume_token(DO);
      Block(true);
      jj_consume_token(END);
      jj_consume_token(PROC);
         builder.mkFunctionExp( count, true, start.combine(prevCoords())) ;
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AbbreviatedFunctionExp() throws ParseException {
    SourceCoords start = currentCoords() ;
    SourceCoords end ;
    SourceCoords blockStart  ;
        int count ;
    jj_consume_token(LPAR);
    count = Params();
    jj_consume_token(RPAR);
    jj_consume_token(RIGHT_ARROW);
         builder.startBlock() ;
         blockStart = currentCoords() ;
    Primary();
     end = prevCoords() ;
     builder.mkExpressionCommand( ) ;
         builder.endBlock( 1, blockStart.combine( end ) ) ;
         builder.mkFunctionExp( count, false, start.combine( end ) ) ;
  }

  final public void ParenthizedExp() throws ParseException {
    SourceCoords start = currentCoords() ;
        int count = 0 ;
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case DIV:
    case FALSE:
    case FUN:
    case IMPLIES:
    case INTERSECTION:
    case MOD:
    case NOT:
    case OR:
    case PROC:
    case TRUE:
    case UNION:
    case STAR:
    case LPAR:
    case LBRACK:
    case LBRACE:
    case INT_LITERAL:
    case STRING_LITERAL:
    case LATEX_OP:
    case OTHER_OP:
    case ID:
      Exp();
                          ++count;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        Exp();
                            ++count;
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
          if( count != 1 ) {
                builder.mkTuple( count, start.combine(prevCoords())) ;}
  }

  /////////////////////
 //  Types          //
/////////////////////
  final public void Type() throws ParseException {
        SourceCoords start = currentCoords() ;
    ProductType();
    MoreType(start);
  }

  final public void MoreType(SourceCoords start) throws ParseException {
        SourceCoords mid ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RIGHT_ARROW:
      jj_consume_token(RIGHT_ARROW);
         mid = currentCoords() ;
      ProductType();
      MoreType(mid);
         builder.mkTypeApplication( "Fun", 2, start.combine(prevCoords()) );
      break;
    default:
      jj_la1[27] = jj_gen;

    }
  }

  final public void ProductType() throws ParseException {
        SourceCoords start = currentCoords() ;
        int count = 1 ;
    SimpleType();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_7;
      }
      jj_consume_token(STAR);
      SimpleType();
                                 ++count;
    }
         if(count > 1) builder.mkTypeApplication( "Product", count, start.combine(prevCoords()) );
  }

  final public void SimpleType() throws ParseException {
        SourceCoords start = currentCoords() ;
        int count = 0 ;
        Token tok ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      tok = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        jj_consume_token(LBRACK);
        Type();
                            ++count;
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_8;
          }
          jj_consume_token(COMMA);
          Type();
                                    ++count;
        }
        jj_consume_token(RBRACK);
                 builder.mkTypeApplication( tok.image, count, start.combine(prevCoords()) ) ;
        break;
      default:
        jj_la1[30] = jj_gen;
                 builder.mkIdentifierType( tok.image, start.combine(prevCoords()) ) ;
      }
      break;
    case LPAR:
      jj_consume_token(LPAR);
      Type();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /////////////////////
 //  Miscellaneous  //
/////////////////////
  final public void Arg() throws ParseException {
    SimpleExp();
  }

  final public void Exps() throws ParseException {
    SourceCoords start = currentCoords() ;
        int count = 1 ;
    Exp();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      Exp();
                              ++count;
    }
          if( count != 1 ) {
                builder.mkTuple( count, start.combine(prevCoords())) ;}
  }

  final public int Params() throws ParseException {
        int count = 0 ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Variable();
      jj_consume_token(COLON);
      Type();
                                       ++count;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        Variable();
        jj_consume_token(COLON);
        Type();
                                                   ++count;
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
         {if (true) return count ;}
    throw new Error("Missing return statement in function");
  }

  final public void Variable() throws ParseException {
        Token tok ;
        SourceCoords start = currentCoords() ;
    tok = jj_consume_token(ID);
         builder.mkVariable( tok.image, start ) ;
  }

  final public String Name() throws ParseException {
        Token tok ;
        String str ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      tok = jj_consume_token(ID);
                    {if (true) return tok.image;}
      break;
    case BINARY:
      jj_consume_token(BINARY);
      str = Op();
                             {if (true) return "binary(" +str+ ")" ;}
      break;
    case UNARY:
      jj_consume_token(UNARY);
      str = Op();
                                 {if (true) return "unary(" +str+ ")" ;}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Op() throws ParseException {
        Token tok ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      tok = jj_consume_token(STAR);
      break;
    case LATEX_OP:
      tok = jj_consume_token(LATEX_OP);
      break;
    case OTHER_OP:
      tok = jj_consume_token(OTHER_OP);
      break;
    case AND:
      tok = jj_consume_token(AND);
      break;
    case DIV:
      tok = jj_consume_token(DIV);
      break;
    case INTERSECTION:
      tok = jj_consume_token(INTERSECTION);
      break;
    case IMPLIES:
      tok = jj_consume_token(IMPLIES);
      break;
    case MOD:
      tok = jj_consume_token(MOD);
      break;
    case NOT:
      tok = jj_consume_token(NOT);
      break;
    case OR:
      tok = jj_consume_token(OR);
      break;
    case UNION:
      tok = jj_consume_token(UNION);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return tok.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_21()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(PROC)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RPAR)) return true;
    if (jj_scan_token(RIGHT_ARROW)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26() {
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(RIGHT_ARROW)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(FUN)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PseuParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0xcaffe2c0,0x0,0x0,0x30000000,0x0,0x408000,0x40014080,0x8afea240,0x0,0x8a7ea240,0x240a000,0x883e0240,0x240a000,0x240a000,0x240a000,0x0,0x8a7ea240,0x0,0x8a7ea240,0x0,0x408000,0x0,0x8a7ea240,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000100,0x883e0240,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2,0x2,0x2,0x2,0x1f150,0x100000,0x4,0x0,0x4,0x0,0x0,0x1f150,0x1,0x1f150,0x13158,0xc000,0x13150,0x13158,0x13150,0x1,0x1f150,0x1,0x1f150,0x4,0x0,0x1,0x1f150,0x400,0x0,0x1,0x40,0x10010,0x1,0x1,0x10000,0x10000,0xc000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PseuParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PseuParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PseuParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PseuParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new PseuParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PseuParser(PseuParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PseuParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
